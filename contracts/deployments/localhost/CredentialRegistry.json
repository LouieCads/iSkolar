{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__AlreadyRevoked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__CredentialAlreadyIssued",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__CredentialNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__EmptyMetadataURI",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__EmptySchema",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__InvalidDocHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__InvalidStudent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CredentialRegistry__NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "docHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "CredentialIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "docHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CredentialRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ISSUER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "addIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminGrantSelfIssuerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "credentials",
      "outputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "docHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "issuedAt",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "docHashToId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "name": "getCredential",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "student",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "docHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "issuedAt",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct CredentialRegistry.Credential",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "docHash",
          "type": "bytes32"
        }
      ],
      "name": "getCredentialByHash",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "student",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "docHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "issuedAt",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct CredentialRegistry.Credential",
          "name": "cred",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "getIssuerCredentials",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        }
      ],
      "name": "getStudentCredentials",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCredentials",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isIssuer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "docHash",
          "type": "bytes32"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "docHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "issueCredential",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "issuerCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "removeIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "revokeCredential",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "studentCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0b1f5405f91b47c1c38af88510b392ea3db1280cb2dea6d6cbae0d116a04620",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2545815",
    "logsBloom": "0x
    "blockHash": "0xc283c0fb9447ced26c10ec80dbfdf18a8e7b53dcd88977f876e54f79b7d480d4",
    "transactionHash": "0xb0b1f5405f91b47c1c38af88510b392ea3db1280cb2dea6d6cbae0d116a04620",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb0b1f5405f91b47c1c38af88510b392ea3db1280cb2dea6d6cbae0d116a04620",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc283c0fb9447ced26c10ec80dbfdf18a8e7b53dcd88977f876e54f79b7d480d4"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2545815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "f99486523ec6c3491b5a35928978e2d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__AlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__CredentialAlreadyIssued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__CredentialNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__EmptyMetadataURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__EmptySchema\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__InvalidDocHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__InvalidStudent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CredentialRegistry__NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"CredentialIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CredentialRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminGrantSelfIssuerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"credentials\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"docHashToId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"name\":\"getCredential\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct CredentialRegistry.Credential\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"}],\"name\":\"getCredentialByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct CredentialRegistry.Credential\",\"name\":\"cred\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"getIssuerCredentials\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"}],\"name\":\"getStudentCredentials\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCredentials\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"docHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"issueCredential\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issuerCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"removeIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"revokeCredential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"studentCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"adminGrantSelfIssuerRole()\":{\"details\":\"This gives admin flexibility while maintaining proper role separation\"},\"getCredential(bytes32)\":{\"params\":{\"credentialId\":\"The credential ID\"},\"returns\":{\"_0\":\"The credential data\"}},\"getIssuerCredentials(address)\":{\"params\":{\"issuer\":\"Issuer address\"},\"returns\":{\"_0\":\"Array of credential IDs\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStudentCredentials(address)\":{\"params\":{\"student\":\"Student address\"},\"returns\":{\"_0\":\"Array of credential IDs\"}},\"getTotalCredentials()\":{\"returns\":{\"_0\":\"Total credential count\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isIssuer(address)\":{\"params\":{\"account\":\"Address to check\"},\"returns\":{\"_0\":\"True if account has issuer role\"}},\"issueCredential(address,bytes32,string,string)\":{\"params\":{\"docHash\":\"keccak256(file) or keccak256(fileBytes)\",\"metadataURI\":\"pointer to Azure/IPFS (no PII)\",\"schema\":\"e.g., \\\"transcript\\\", \\\"certificate\\\"\",\"student\":\"Student wallet address\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminGrantSelfIssuerRole()\":{\"notice\":\"Allow admin to grant themselves ISSUER_ROLE if needed (for testing/emergency)\"},\"getCredential(bytes32)\":{\"notice\":\"Get credential by ID\"},\"getIssuerCredentials(address)\":{\"notice\":\"Get all credentials issued by a specific issuer\"},\"getStudentCredentials(address)\":{\"notice\":\"Get all credentials for a specific student\"},\"getTotalCredentials()\":{\"notice\":\"Get total number of credentials issued\"},\"isIssuer(address)\":{\"notice\":\"Check if an address has issuer role\"},\"issueCredential(address,bytes32,string,string)\":{\"notice\":\"Issue a credential\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CredentialRegistry.sol\":\"CredentialRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/CredentialRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n// Custom errors for gas efficiency\\r\\nerror CredentialRegistry__InvalidStudent();\\r\\nerror CredentialRegistry__InvalidDocHash();\\r\\nerror CredentialRegistry__EmptySchema();\\r\\nerror CredentialRegistry__EmptyMetadataURI();\\r\\nerror CredentialRegistry__CredentialAlreadyIssued();\\r\\nerror CredentialRegistry__CredentialNotFound();\\r\\nerror CredentialRegistry__NotAuthorized();\\r\\nerror CredentialRegistry__AlreadyRevoked();\\r\\nerror CredentialRegistry__InvalidAddress();\\r\\n\\r\\ncontract CredentialRegistry is AccessControl, Pausable {\\r\\n    /*\\r\\n     * Role Structure:\\r\\n     * - DEFAULT_ADMIN_ROLE: Can manage the contract, add/remove issuers, pause/unpause\\r\\n     * - ISSUER_ROLE: Schools that can issue and revoke credentials\\r\\n     *\\r\\n     * Note: Admin is not automatically an issuer to maintain proper separation of concerns\\r\\n     */\\r\\n    bytes32 public constant ISSUER_ROLE = keccak256(\\\"ISSUER_ROLE\\\"); // schools only\\r\\n\\r\\n    struct Credential {\\r\\n        address student;\\r\\n        address issuer;\\r\\n        bytes32 docHash; // keccak256 hash of file or content\\r\\n        string schema; // \\\"transcript\\\", \\\"certificate\\\", etc.\\r\\n        string metadataURI; // IPFS/Azure URL (no PII if possible)\\r\\n        uint64 issuedAt;\\r\\n        bool revoked;\\r\\n    }\\r\\n\\r\\n    // credentialId -> Credential\\r\\n    mapping(bytes32 => Credential) public credentials;\\r\\n\\r\\n    // docHash -> credentialId (one credential per docHash)\\r\\n    mapping(bytes32 => bytes32) public docHashToId;\\r\\n\\r\\n    // student -> array of credential IDs\\r\\n    mapping(address => bytes32[]) public studentCredentials;\\r\\n\\r\\n    // issuer -> array of credential IDs\\r\\n    mapping(address => bytes32[]) public issuerCredentials;\\r\\n\\r\\n    // Counter for unique credential IDs\\r\\n    uint256 private _credentialCounter;\\r\\n\\r\\n    event CredentialIssued(\\r\\n        bytes32 indexed credentialId,\\r\\n        address indexed student,\\r\\n        address indexed issuer,\\r\\n        bytes32 docHash,\\r\\n        string schema,\\r\\n        string metadataURI\\r\\n    );\\r\\n    event CredentialRevoked(\\r\\n        bytes32 indexed credentialId,\\r\\n        address indexed issuer,\\r\\n        bytes32 docHash,\\r\\n        string reason\\r\\n    );\\r\\n\\r\\n    constructor(address admin) {\\r\\n        if (admin == address(0)) revert CredentialRegistry__InvalidAddress();\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        // Admin can manage issuers but is not an issuer by default\\r\\n        // Schools will be granted ISSUER_ROLE by admin\\r\\n    }\\r\\n\\r\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Issue a credential\\r\\n     * @param student Student wallet address\\r\\n     * @param docHash keccak256(file) or keccak256(fileBytes)\\r\\n     * @param schema e.g., \\\"transcript\\\", \\\"certificate\\\"\\r\\n     * @param metadataURI pointer to Azure/IPFS (no PII)\\r\\n     */\\r\\n    function issueCredential(\\r\\n        address student,\\r\\n        bytes32 docHash,\\r\\n        string calldata schema,\\r\\n        string calldata metadataURI\\r\\n    )\\r\\n        external\\r\\n        whenNotPaused\\r\\n        onlyRole(ISSUER_ROLE)\\r\\n        returns (bytes32 credentialId)\\r\\n    {\\r\\n        // Enhanced input validation with custom errors\\r\\n        if (student == address(0)) revert CredentialRegistry__InvalidStudent();\\r\\n        if (docHash == bytes32(0)) revert CredentialRegistry__InvalidDocHash();\\r\\n        if (bytes(schema).length == 0) revert CredentialRegistry__EmptySchema();\\r\\n        if (bytes(metadataURI).length == 0)\\r\\n            revert CredentialRegistry__EmptyMetadataURI();\\r\\n        if (docHashToId[docHash] != bytes32(0))\\r\\n            revert CredentialRegistry__CredentialAlreadyIssued();\\r\\n\\r\\n        // Create unique credential ID using counter to prevent collisions\\r\\n        _credentialCounter++;\\r\\n        credentialId = keccak256(\\r\\n            abi.encodePacked(msg.sender, student, docHash, _credentialCounter)\\r\\n        );\\r\\n\\r\\n        // Store credential\\r\\n        credentials[credentialId] = Credential({\\r\\n            student: student,\\r\\n            issuer: msg.sender,\\r\\n            docHash: docHash,\\r\\n            schema: schema,\\r\\n            metadataURI: metadataURI,\\r\\n            issuedAt: uint64(block.timestamp),\\r\\n            revoked: false\\r\\n        });\\r\\n\\r\\n        // Update mappings\\r\\n        docHashToId[docHash] = credentialId;\\r\\n        studentCredentials[student].push(credentialId);\\r\\n        issuerCredentials[msg.sender].push(credentialId);\\r\\n\\r\\n        emit CredentialIssued(\\r\\n            credentialId,\\r\\n            student,\\r\\n            msg.sender,\\r\\n            docHash,\\r\\n            schema,\\r\\n            metadataURI\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function revokeCredential(\\r\\n        bytes32 credentialId,\\r\\n        string calldata reason\\r\\n    ) external whenNotPaused {\\r\\n        Credential storage cred = credentials[credentialId];\\r\\n        if (cred.issuer == address(0))\\r\\n            revert CredentialRegistry__CredentialNotFound();\\r\\n        if (!hasRole(ISSUER_ROLE, msg.sender) && msg.sender != cred.issuer)\\r\\n            revert CredentialRegistry__NotAuthorized();\\r\\n        if (cred.revoked) revert CredentialRegistry__AlreadyRevoked();\\r\\n\\r\\n        cred.revoked = true;\\r\\n\\r\\n        // Clear the docHash mapping to prevent confusion\\r\\n        delete docHashToId[cred.docHash];\\r\\n\\r\\n        emit CredentialRevoked(credentialId, msg.sender, cred.docHash, reason);\\r\\n    }\\r\\n\\r\\n    function getCredentialByHash(\\r\\n        bytes32 docHash\\r\\n    ) external view returns (Credential memory cred, bytes32 credentialId) {\\r\\n        credentialId = docHashToId[docHash];\\r\\n        cred = credentials[credentialId];\\r\\n    }\\r\\n\\r\\n    function isValid(bytes32 docHash) external view returns (bool) {\\r\\n        bytes32 id = docHashToId[docHash];\\r\\n        if (id == bytes32(0)) return false;\\r\\n        return !credentials[id].revoked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all credentials for a specific student\\r\\n     * @param student Student address\\r\\n     * @return Array of credential IDs\\r\\n     */\\r\\n    function getStudentCredentials(\\r\\n        address student\\r\\n    ) external view returns (bytes32[] memory) {\\r\\n        if (student == address(0)) revert CredentialRegistry__InvalidAddress();\\r\\n        return studentCredentials[student];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all credentials issued by a specific issuer\\r\\n     * @param issuer Issuer address\\r\\n     * @return Array of credential IDs\\r\\n     */\\r\\n    function getIssuerCredentials(\\r\\n        address issuer\\r\\n    ) external view returns (bytes32[] memory) {\\r\\n        if (issuer == address(0)) revert CredentialRegistry__InvalidAddress();\\r\\n        return issuerCredentials[issuer];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an address has issuer role\\r\\n     * @param account Address to check\\r\\n     * @return True if account has issuer role\\r\\n     */\\r\\n    function isIssuer(address account) external view returns (bool) {\\r\\n        return hasRole(ISSUER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get total number of credentials issued\\r\\n     * @return Total credential count\\r\\n     */\\r\\n    function getTotalCredentials() external view returns (uint256) {\\r\\n        return _credentialCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get credential by ID\\r\\n     * @param credentialId The credential ID\\r\\n     * @return The credential data\\r\\n     */\\r\\n    function getCredential(\\r\\n        bytes32 credentialId\\r\\n    ) external view returns (Credential memory) {\\r\\n        Credential memory cred = credentials[credentialId];\\r\\n        if (cred.issuer == address(0))\\r\\n            revert CredentialRegistry__CredentialNotFound();\\r\\n        return cred;\\r\\n    }\\r\\n\\r\\n    // Admin: add/remove authorized issuers (schools/admins)\\r\\n    function addIssuer(address issuer) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (issuer == address(0)) revert CredentialRegistry__InvalidAddress();\\r\\n        _grantRole(ISSUER_ROLE, issuer);\\r\\n    }\\r\\n\\r\\n    function removeIssuer(\\r\\n        address issuer\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (issuer == address(0)) revert CredentialRegistry__InvalidAddress();\\r\\n        _revokeRole(ISSUER_ROLE, issuer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow admin to grant themselves ISSUER_ROLE if needed (for testing/emergency)\\r\\n     * @dev This gives admin flexibility while maintaining proper role separation\\r\\n     */\\r\\n    function adminGrantSelfIssuerRole() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _grantRole(ISSUER_ROLE, msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x276404e820a8f3d0e70261f870e58228f5f8220f435109bc0a83eb6103204d40\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80635c975abb116100f9578063a217fddf11610097578063d547741f11610071578063d547741f146104f8578063d8202ffb14610514578063ddb6dbd614610544578063f1470a3514610575576101a9565b8063a217fddf1461047a578063a219550f14610498578063d1be4883146104c8576101a9565b806382aefa24116100d357806382aefa24146103f25780638456cb5914610410578063877b9a671461041a57806391d148541461044a576101a9565b80635c975abb1461039a5780636a938567146103b85780637c519a0b146103e8576101a9565b8063248a9ca31161016657806336568abe1161014057806336568abe1461033c5780633f4ba83a1461035857806347bc709314610362578063493814b51461037e576101a9565b8063248a9ca3146102ba578063299d0348146102ea5780632f2ff15d14610320576101a9565b806301ffc9a7146101ae5780630843d299146101de5780630dd308cd1461020e5780631abac44b1461023e57806320694db01461026e578063218cdc321461028a575b600080fd5b6101c860048036038101906101c39190611fb6565b610593565b6040516101d59190611ffe565b60405180910390f35b6101f860048036038101906101f3919061204f565b61060d565b604051610205919061208b565b60405180910390f35b6102286004803603810190610223919061213a565b610625565b604051610235919061208b565b60405180910390f35b6102586004803603810190610253919061213a565b610656565b604051610265919061208b565b60405180910390f35b6102886004803603810190610283919061217a565b610687565b005b6102a4600480360381019061029f919061217a565b610729565b6040516102b19190612265565b60405180910390f35b6102d460048036038101906102cf919061204f565b610826565b6040516102e1919061208b565b60405180910390f35b61030460048036038101906102ff919061204f565b610845565b6040516103179796959493929190612349565b60405180910390f35b61033a600480360381019061033591906123c6565b6109f8565b005b610356600480360381019061035191906123c6565b610a1a565b005b610360610a95565b005b61037c6004803603810190610377919061217a565b610aad565b005b6103986004803603810190610393919061246b565b610b4f565b005b6103a2610d94565b6040516103af9190611ffe565b60405180910390f35b6103d260048036038101906103cd919061204f565b610dab565b6040516103df9190611ffe565b60405180910390f35b6103f0610e06565b005b6103fa610e41565b604051610407919061208b565b60405180910390f35b610418610e65565b005b610434600480360381019061042f919061217a565b610e7d565b6040516104419190611ffe565b60405180910390f35b610464600480360381019061045f91906123c6565b610eb0565b6040516104719190611ffe565b60405180910390f35b610482610f1a565b60405161048f919061208b565b60405180910390f35b6104b260048036038101906104ad91906124cb565b610f21565b6040516104bf919061208b565b60405180910390f35b6104e260048036038101906104dd919061204f565b611483565b6040516104ef919061268c565b60405180910390f35b610512600480360381019061050d91906123c6565b611747565b005b61052e6004803603810190610529919061217a565b611769565b60405161053b9190612265565b60405180910390f35b61055e6004803603810190610559919061204f565b611866565b60405161056c9291906126ae565b60405180910390f35b61057d611ad2565b60405161058a91906126ed565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610606575061060582611adc565b5b9050919050565b60036020528060005260406000206000915090505481565b6004602052816000526040600020818154811061064157600080fd5b90600052602060002001600091509150505481565b6005602052816000526040600020818154811061067257600080fd5b90600052602060002001600091509150505481565b6000801b61069481611b46565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106fa576040517fd74a850e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107247f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12283611b5a565b505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610791576040517fd74a850e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561081a57602002820191906000526020600020905b815481526020019060010190808311610806575b50505050509050919050565b6000806000838152602001908152602001600020600101549050919050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030180546108ba90612737565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690612737565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b50505050509080600401805461094890612737565b80601f016020809104026020016040519081016040528092919081815260200182805461097490612737565b80156109c15780601f10610996576101008083540402835291602001916109c1565b820191906000526020600020905b8154815290600101906020018083116109a457829003601f168201915b5050505050908060050160009054906101000a900467ffffffffffffffff16908060050160089054906101000a900460ff16905087565b610a0182610826565b610a0a81611b46565b610a148383611b5a565b50505050565b610a22611c4b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a86576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a908282611c53565b505050565b6000801b610aa281611b46565b610aaa611d45565b50565b6000801b610aba81611b46565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b20576040517fd74a850e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4a7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12283611c53565b505050565b610b57611da8565b6000600260008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bf8576040517f54ef681100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c227f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12233610eb0565b158015610c7f57508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610cb6576040517f2451dbbd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060050160089054906101000a900460ff1615610cff576040517f9008bcc000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160050160086101000a81548160ff0219169083151502179055506003600082600201548152602001908152602001600020600090553373ffffffffffffffffffffffffffffffffffffffff16847f8a0c4fdd9c910f033ae5add53572682b98f8d54b2af4ba7a22a41fb60969c37683600201548686604051610d86939291906127a4565b60405180910390a350505050565b6000600160009054906101000a900460ff16905090565b600080600360008481526020019081526020016000205490506000801b8103610dd8576000915050610e01565b6002600082815260200190815260200160002060050160089054906101000a900460ff16159150505b919050565b6000801b610e1381611b46565b610e3d7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12233611b5a565b5050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b6000801b610e7281611b46565b610e7a611de9565b50565b6000610ea97f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12283610eb0565b9050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6000610f2b611da8565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa122610f5581611b46565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603610fbb576040517fe2d4aa1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b8703610ff7576040517f85378e2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008686905003611034576040517fb52cff0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008484905003611071576040517ffcf5226200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b6003600089815260200190815260200160002054146110c0576040517fdb40fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008154809291906110d390612805565b91905055503388886006546040516020016110f194939291906128d7565b6040516020818303038152906040528051906020012091506040518060e001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020014267ffffffffffffffff168152602001600015158152506002600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030190816112bd9190612b00565b5060808201518160040190816112d39190612b00565b5060a08201518160050160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160050160086101000a81548160ff021916908315150217905550905050816003600089815260200190815260200160002081905550600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16837fcd7e626e73eebce5228b09eedfb480e46c184b106eefc953626e3e7be0045e348a8a8a8a8a604051611470959493929190612bd2565b60405180910390a4509695505050505050565b61148b611edc565b6000600260008481526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805461157190612737565b80601f016020809104026020016040519081016040528092919081815260200182805461159d90612737565b80156115ea5780601f106115bf576101008083540402835291602001916115ea565b820191906000526020600020905b8154815290600101906020018083116115cd57829003601f168201915b5050505050815260200160048201805461160390612737565b80601f016020809104026020016040519081016040528092919081815260200182805461162f90612737565b801561167c5780601f106116515761010080835404028352916020019161167c565b820191906000526020600020905b81548152906001019060200180831161165f57829003601f168201915b505050505081526020016005820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160089054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff160361173e576040517f54ef681100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b61175082610826565b61175981611b46565b6117638383611c53565b50505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117d1576040517fd74a850e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561185a57602002820191906000526020600020905b815481526020019060010190808311611846575b50505050509050919050565b61186e611edc565b600060036000848152602001908152602001600020549050600260008281526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805461196a90612737565b80601f016020809104026020016040519081016040528092919081815260200182805461199690612737565b80156119e35780601f106119b8576101008083540402835291602001916119e3565b820191906000526020600020905b8154815290600101906020018083116119c657829003601f168201915b505050505081526020016004820180546119fc90612737565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2890612737565b8015611a755780601f10611a4a57610100808354040283529160200191611a75565b820191906000526020600020905b815481529060010190602001808311611a5857829003601f168201915b505050505081526020016005820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160089054906101000a900460ff1615151515815250509150915091565b6000600654905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611b5781611b52611c4b565b611e4b565b50565b6000611b668383610eb0565b611c4057600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bdd611c4b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611c45565b600090505b92915050565b600033905090565b6000611c5f8383610eb0565b15611d3a57600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cd7611c4b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611d3f565b600090505b92915050565b611d4d611e9c565b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d91611c4b565b604051611d9e9190612c1b565b60405180910390a1565b611db0610d94565b15611de7576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611df1611da8565b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e34611c4b565b604051611e419190612c1b565b60405180910390a1565b611e558282610eb0565b611e985780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611e8f929190612c36565b60405180910390fd5b5050565b611ea4610d94565b611eda576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016060815260200160608152602001600067ffffffffffffffff1681526020016000151581525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f9381611f5e565b8114611f9e57600080fd5b50565b600081359050611fb081611f8a565b92915050565b600060208284031215611fcc57611fcb611f54565b5b6000611fda84828501611fa1565b91505092915050565b60008115159050919050565b611ff881611fe3565b82525050565b60006020820190506120136000830184611fef565b92915050565b6000819050919050565b61202c81612019565b811461203757600080fd5b50565b60008135905061204981612023565b92915050565b60006020828403121561206557612064611f54565b5b60006120738482850161203a565b91505092915050565b61208581612019565b82525050565b60006020820190506120a0600083018461207c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120d1826120a6565b9050919050565b6120e1816120c6565b81146120ec57600080fd5b50565b6000813590506120fe816120d8565b92915050565b6000819050919050565b61211781612104565b811461212257600080fd5b50565b6000813590506121348161210e565b92915050565b6000806040838503121561215157612150611f54565b5b600061215f858286016120ef565b925050602061217085828601612125565b9150509250929050565b6000602082840312156121905761218f611f54565b5b600061219e848285016120ef565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121dc81612019565b82525050565b60006121ee83836121d3565b60208301905092915050565b6000602082019050919050565b6000612212826121a7565b61221c81856121b2565b9350612227836121c3565b8060005b8381101561225857815161223f88826121e2565b975061224a836121fa565b92505060018101905061222b565b5085935050505092915050565b6000602082019050818103600083015261227f8184612207565b905092915050565b612290816120c6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122d05780820151818401526020810190506122b5565b60008484015250505050565b6000601f19601f8301169050919050565b60006122f882612296565b61230281856122a1565b93506123128185602086016122b2565b61231b816122dc565b840191505092915050565b600067ffffffffffffffff82169050919050565b61234381612326565b82525050565b600060e08201905061235e600083018a612287565b61236b6020830189612287565b612378604083018861207c565b818103606083015261238a81876122ed565b9050818103608083015261239e81866122ed565b90506123ad60a083018561233a565b6123ba60c0830184611fef565b98975050505050505050565b600080604083850312156123dd576123dc611f54565b5b60006123eb8582860161203a565b92505060206123fc858286016120ef565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f84011261242b5761242a612406565b5b8235905067ffffffffffffffff8111156124485761244761240b565b5b60208301915083600182028301111561246457612463612410565b5b9250929050565b60008060006040848603121561248457612483611f54565b5b60006124928682870161203a565b935050602084013567ffffffffffffffff8111156124b3576124b2611f59565b5b6124bf86828701612415565b92509250509250925092565b600080600080600080608087890312156124e8576124e7611f54565b5b60006124f689828a016120ef565b965050602061250789828a0161203a565b955050604087013567ffffffffffffffff81111561252857612527611f59565b5b61253489828a01612415565b9450945050606087013567ffffffffffffffff81111561255757612556611f59565b5b61256389828a01612415565b92509250509295509295509295565b61257b816120c6565b82525050565b600082825260208201905092915050565b600061259d82612296565b6125a78185612581565b93506125b78185602086016122b2565b6125c0816122dc565b840191505092915050565b6125d481612326565b82525050565b6125e381611fe3565b82525050565b600060e0830160008301516126016000860182612572565b5060208301516126146020860182612572565b50604083015161262760408601826121d3565b506060830151848203606086015261263f8282612592565b915050608083015184820360808601526126598282612592565b91505060a083015161266e60a08601826125cb565b5060c083015161268160c08601826125da565b508091505092915050565b600060208201905081810360008301526126a681846125e9565b905092915050565b600060408201905081810360008301526126c881856125e9565b90506126d7602083018461207c565b9392505050565b6126e781612104565b82525050565b600060208201905061270260008301846126de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061274f57607f821691505b60208210810361276257612761612708565b5b50919050565b82818337600083830152505050565b600061278383856122a1565b9350612790838584612768565b612799836122dc565b840190509392505050565b60006040820190506127b9600083018661207c565b81810360208301526127cc818486612777565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281082612104565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612842576128416127d6565b5b600182019050919050565b60008160601b9050919050565b60006128658261284d565b9050919050565b60006128778261285a565b9050919050565b61288f61288a826120c6565b61286c565b82525050565b6000819050919050565b6128b06128ab82612019565b612895565b82525050565b6000819050919050565b6128d16128cc82612104565b6128b6565b82525050565b60006128e3828761287e565b6014820191506128f3828661287e565b601482019150612903828561289f565b60208201915061291382846128c0565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129b67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612979565b6129c08683612979565b95508019841693508086168417925050509392505050565b6000819050919050565b60006129fd6129f86129f384612104565b6129d8565b612104565b9050919050565b6000819050919050565b612a17836129e2565b612a2b612a2382612a04565b848454612986565b825550505050565b600090565b612a40612a33565b612a4b818484612a0e565b505050565b5b81811015612a6f57612a64600082612a38565b600181019050612a51565b5050565b601f821115612ab457612a8581612954565b612a8e84612969565b81016020851015612a9d578190505b612ab1612aa985612969565b830182612a50565b50505b505050565b600082821c905092915050565b6000612ad760001984600802612ab9565b1980831691505092915050565b6000612af08383612ac6565b9150826002028217905092915050565b612b0982612296565b67ffffffffffffffff811115612b2257612b21612925565b5b612b2c8254612737565b612b37828285612a73565b600060209050601f831160018114612b6a5760008415612b58578287015190505b612b628582612ae4565b865550612bca565b601f198416612b7886612954565b60005b82811015612ba057848901518255600182019150602085019450602081019050612b7b565b86831015612bbd5784890151612bb9601f891682612ac6565b8355505b6001600288020188555050505b505050505050565b6000606082019050612be7600083018861207c565b8181036020830152612bfa818688612777565b90508181036040830152612c0f818486612777565b90509695505050505050565b6000602082019050612c306000830184612287565b92915050565b6000604082019050612c4b6000830185612287565b612c58602083018461207c565b939250505056fea26469706673582212205a1137505fff432f83eaf4e1a674c2fa26348fc9ed7ba48da80efb828707e74764736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "adminGrantSelfIssuerRole()": {
        "details": "This gives admin flexibility while maintaining proper role separation"
      },
      "getCredential(bytes32)": {
        "params": {
          "credentialId": "The credential ID"
        },
        "returns": {
          "_0": "The credential data"
        }
      },
      "getIssuerCredentials(address)": {
        "params": {
          "issuer": "Issuer address"
        },
        "returns": {
          "_0": "Array of credential IDs"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStudentCredentials(address)": {
        "params": {
          "student": "Student address"
        },
        "returns": {
          "_0": "Array of credential IDs"
        }
      },
      "getTotalCredentials()": {
        "returns": {
          "_0": "Total credential count"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isIssuer(address)": {
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "_0": "True if account has issuer role"
        }
      },
      "issueCredential(address,bytes32,string,string)": {
        "params": {
          "docHash": "keccak256(file) or keccak256(fileBytes)",
          "metadataURI": "pointer to Azure/IPFS (no PII)",
          "schema": "e.g., \"transcript\", \"certificate\"",
          "student": "Student wallet address"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminGrantSelfIssuerRole()": {
        "notice": "Allow admin to grant themselves ISSUER_ROLE if needed (for testing/emergency)"
      },
      "getCredential(bytes32)": {
        "notice": "Get credential by ID"
      },
      "getIssuerCredentials(address)": {
        "notice": "Get all credentials issued by a specific issuer"
      },
      "getStudentCredentials(address)": {
        "notice": "Get all credentials for a specific student"
      },
      "getTotalCredentials()": {
        "notice": "Get total number of credentials issued"
      },
      "isIssuer(address)": {
        "notice": "Check if an address has issuer role"
      },
      "issueCredential(address,bytes32,string,string)": {
        "notice": "Issue a credential"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)"
      },
      {
        "astId": 418,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 606,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "credentials",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Credential)601_storage)"
      },
      {
        "astId": 610,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "docHashToId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 615,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "studentCredentials",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 620,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "issuerCredentials",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 622,
        "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
        "label": "_credentialCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Credential)601_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CredentialRegistry.Credential)",
        "numberOfBytes": "32",
        "value": "t_struct(Credential)601_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)22_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Credential)601_storage": {
        "encoding": "inplace",
        "label": "struct CredentialRegistry.Credential",
        "members": [
          {
            "astId": 588,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "student",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 590,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "issuer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 592,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "docHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 594,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 596,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "metadataURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 598,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "issuedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 600,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "revoked",
            "offset": 8,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)22_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21,
            "contract": "contracts/CredentialRegistry.sol:CredentialRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}