{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/CredentialRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\n// Custom errors for gas efficiency\r\nerror CredentialRegistry__InvalidStudent();\r\nerror CredentialRegistry__InvalidDocHash();\r\nerror CredentialRegistry__EmptySchema();\r\nerror CredentialRegistry__EmptyMetadataURI();\r\nerror CredentialRegistry__CredentialAlreadyIssued();\r\nerror CredentialRegistry__CredentialNotFound();\r\nerror CredentialRegistry__NotAuthorized();\r\nerror CredentialRegistry__AlreadyRevoked();\r\nerror CredentialRegistry__InvalidAddress();\r\n\r\ncontract CredentialRegistry is AccessControl, Pausable {\r\n    /*\r\n     * Role Structure:\r\n     * - DEFAULT_ADMIN_ROLE: Can manage the contract, add/remove issuers, pause/unpause\r\n     * - ISSUER_ROLE: Schools that can issue and revoke credentials\r\n     *\r\n     * Note: Admin is not automatically an issuer to maintain proper separation of concerns\r\n     */\r\n    bytes32 public constant ISSUER_ROLE = keccak256(\"ISSUER_ROLE\"); // schools only\r\n\r\n    struct Credential {\r\n        address student;\r\n        address issuer;\r\n        bytes32 docHash; // keccak256 hash of file or content\r\n        string schema; // \"transcript\", \"certificate\", etc.\r\n        string metadataURI; // IPFS/Azure URL (no PII if possible)\r\n        uint64 issuedAt;\r\n        bool revoked;\r\n    }\r\n\r\n    // credentialId -> Credential\r\n    mapping(bytes32 => Credential) public credentials;\r\n\r\n    // docHash -> credentialId (one credential per docHash)\r\n    mapping(bytes32 => bytes32) public docHashToId;\r\n\r\n    // student -> array of credential IDs\r\n    mapping(address => bytes32[]) public studentCredentials;\r\n\r\n    // issuer -> array of credential IDs\r\n    mapping(address => bytes32[]) public issuerCredentials;\r\n\r\n    // Counter for unique credential IDs\r\n    uint256 private _credentialCounter;\r\n\r\n    event CredentialIssued(\r\n        bytes32 indexed credentialId,\r\n        address indexed student,\r\n        address indexed issuer,\r\n        bytes32 docHash,\r\n        string schema,\r\n        string metadataURI\r\n    );\r\n    event CredentialRevoked(\r\n        bytes32 indexed credentialId,\r\n        address indexed issuer,\r\n        bytes32 docHash,\r\n        string reason\r\n    );\r\n\r\n    constructor(address admin) {\r\n        if (admin == address(0)) revert CredentialRegistry__InvalidAddress();\r\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\r\n        // Admin can manage issuers but is not an issuer by default\r\n        // Schools will be granted ISSUER_ROLE by admin\r\n    }\r\n\r\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Issue a credential\r\n     * @param student Student wallet address\r\n     * @param docHash keccak256(file) or keccak256(fileBytes)\r\n     * @param schema e.g., \"transcript\", \"certificate\"\r\n     * @param metadataURI pointer to Azure/IPFS (no PII)\r\n     */\r\n    function issueCredential(\r\n        address student,\r\n        bytes32 docHash,\r\n        string calldata schema,\r\n        string calldata metadataURI\r\n    )\r\n        external\r\n        whenNotPaused\r\n        onlyRole(ISSUER_ROLE)\r\n        returns (bytes32 credentialId)\r\n    {\r\n        // Enhanced input validation with custom errors\r\n        if (student == address(0)) revert CredentialRegistry__InvalidStudent();\r\n        if (docHash == bytes32(0)) revert CredentialRegistry__InvalidDocHash();\r\n        if (bytes(schema).length == 0) revert CredentialRegistry__EmptySchema();\r\n        if (bytes(metadataURI).length == 0)\r\n            revert CredentialRegistry__EmptyMetadataURI();\r\n        if (docHashToId[docHash] != bytes32(0))\r\n            revert CredentialRegistry__CredentialAlreadyIssued();\r\n\r\n        // Create unique credential ID using counter to prevent collisions\r\n        _credentialCounter++;\r\n        credentialId = keccak256(\r\n            abi.encodePacked(msg.sender, student, docHash, _credentialCounter)\r\n        );\r\n\r\n        // Store credential\r\n        credentials[credentialId] = Credential({\r\n            student: student,\r\n            issuer: msg.sender,\r\n            docHash: docHash,\r\n            schema: schema,\r\n            metadataURI: metadataURI,\r\n            issuedAt: uint64(block.timestamp),\r\n            revoked: false\r\n        });\r\n\r\n        // Update mappings\r\n        docHashToId[docHash] = credentialId;\r\n        studentCredentials[student].push(credentialId);\r\n        issuerCredentials[msg.sender].push(credentialId);\r\n\r\n        emit CredentialIssued(\r\n            credentialId,\r\n            student,\r\n            msg.sender,\r\n            docHash,\r\n            schema,\r\n            metadataURI\r\n        );\r\n    }\r\n\r\n    function revokeCredential(\r\n        bytes32 credentialId,\r\n        string calldata reason\r\n    ) external whenNotPaused {\r\n        Credential storage cred = credentials[credentialId];\r\n        if (cred.issuer == address(0))\r\n            revert CredentialRegistry__CredentialNotFound();\r\n        if (!hasRole(ISSUER_ROLE, msg.sender) && msg.sender != cred.issuer)\r\n            revert CredentialRegistry__NotAuthorized();\r\n        if (cred.revoked) revert CredentialRegistry__AlreadyRevoked();\r\n\r\n        cred.revoked = true;\r\n\r\n        // Clear the docHash mapping to prevent confusion\r\n        delete docHashToId[cred.docHash];\r\n\r\n        emit CredentialRevoked(credentialId, msg.sender, cred.docHash, reason);\r\n    }\r\n\r\n    function getCredentialByHash(\r\n        bytes32 docHash\r\n    ) external view returns (Credential memory cred, bytes32 credentialId) {\r\n        credentialId = docHashToId[docHash];\r\n        cred = credentials[credentialId];\r\n    }\r\n\r\n    function isValid(bytes32 docHash) external view returns (bool) {\r\n        bytes32 id = docHashToId[docHash];\r\n        if (id == bytes32(0)) return false;\r\n        return !credentials[id].revoked;\r\n    }\r\n\r\n    /**\r\n     * @notice Get all credentials for a specific student\r\n     * @param student Student address\r\n     * @return Array of credential IDs\r\n     */\r\n    function getStudentCredentials(\r\n        address student\r\n    ) external view returns (bytes32[] memory) {\r\n        if (student == address(0)) revert CredentialRegistry__InvalidAddress();\r\n        return studentCredentials[student];\r\n    }\r\n\r\n    /**\r\n     * @notice Get all credentials issued by a specific issuer\r\n     * @param issuer Issuer address\r\n     * @return Array of credential IDs\r\n     */\r\n    function getIssuerCredentials(\r\n        address issuer\r\n    ) external view returns (bytes32[] memory) {\r\n        if (issuer == address(0)) revert CredentialRegistry__InvalidAddress();\r\n        return issuerCredentials[issuer];\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an address has issuer role\r\n     * @param account Address to check\r\n     * @return True if account has issuer role\r\n     */\r\n    function isIssuer(address account) external view returns (bool) {\r\n        return hasRole(ISSUER_ROLE, account);\r\n    }\r\n\r\n    /**\r\n     * @notice Get total number of credentials issued\r\n     * @return Total credential count\r\n     */\r\n    function getTotalCredentials() external view returns (uint256) {\r\n        return _credentialCounter;\r\n    }\r\n\r\n    /**\r\n     * @notice Get credential by ID\r\n     * @param credentialId The credential ID\r\n     * @return The credential data\r\n     */\r\n    function getCredential(\r\n        bytes32 credentialId\r\n    ) external view returns (Credential memory) {\r\n        Credential memory cred = credentials[credentialId];\r\n        if (cred.issuer == address(0))\r\n            revert CredentialRegistry__CredentialNotFound();\r\n        return cred;\r\n    }\r\n\r\n    // Admin: add/remove authorized issuers (schools/admins)\r\n    function addIssuer(address issuer) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        if (issuer == address(0)) revert CredentialRegistry__InvalidAddress();\r\n        _grantRole(ISSUER_ROLE, issuer);\r\n    }\r\n\r\n    function removeIssuer(\r\n        address issuer\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        if (issuer == address(0)) revert CredentialRegistry__InvalidAddress();\r\n        _revokeRole(ISSUER_ROLE, issuer);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow admin to grant themselves ISSUER_ROLE if needed (for testing/emergency)\r\n     * @dev This gives admin flexibility while maintaining proper role separation\r\n     */\r\n    function adminGrantSelfIssuerRole() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _grantRole(ISSUER_ROLE, msg.sender);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}